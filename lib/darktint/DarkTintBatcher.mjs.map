{"version":3,"file":"DarkTintBatcher.mjs","sources":["../../src/darktint/DarkTintBatcher.ts"],"sourcesContent":["import {\r\n    Batcher,\r\n    Color,\r\n    DefaultBatchableMeshElement,\r\n    DefaultBatchableQuadElement,\r\n    extensions,\r\n    ExtensionType,\r\n    Shader\r\n} from 'pixi.js';\r\nimport { DarkTintBatchGeometry } from './DarkTintBatchGeometry';\r\nimport { DarkTintShader } from './DarkTintShader';\r\n\r\nlet defaultShader: Shader = null;\r\n\r\n/** The default batcher is used to batch quads and meshes. */\r\nexport class DarkTintBatcher extends Batcher\r\n{\r\n    /** @ignore */\r\n    public static extension = {\r\n        type: [\r\n            ExtensionType.Batcher,\r\n        ],\r\n        name: 'darkTint',\r\n    } as const;\r\n\r\n    public geometry = new DarkTintBatchGeometry();\r\n    public shader = defaultShader || (defaultShader = new DarkTintShader(this.maxTextures));\r\n    public name = DarkTintBatcher.extension.name;\r\n\r\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, darkColor, textureIdAndRound -> total = 7 */\r\n    public vertexSize = 7;\r\n\r\n    public packAttributes(\r\n        element: DefaultBatchableMeshElement & { darkColor: number },\r\n        float32View: Float32Array,\r\n        uint32View: Uint32Array,\r\n        index: number,\r\n        textureId: number\r\n    )\r\n    {\r\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\r\n\r\n        const wt = element.transform;\r\n\r\n        const a = wt.a;\r\n        const b = wt.b;\r\n        const c = wt.c;\r\n        const d = wt.d;\r\n        const tx = wt.tx;\r\n        const ty = wt.ty;\r\n\r\n        const { positions, uvs } = element;\r\n\r\n        const argb = element.color;\r\n        const worldAlpha = ((argb >> 24) & 0xFF) / 255;\r\n        const darkColor = Color.shared.setValue(element.darkColor).premultiply(worldAlpha, true).toPremultiplied(1, false);\r\n\r\n        const offset = element.attributeOffset;\r\n        const end = offset + element.attributeSize;\r\n\r\n        for (let i = offset; i < end; i++)\r\n        {\r\n            const i2 = i * 2;\r\n\r\n            const x = positions[i2];\r\n            const y = positions[(i2) + 1];\r\n\r\n            float32View[index++] = (a * x) + (c * y) + tx;\r\n            float32View[index++] = (d * y) + (b * x) + ty;\r\n\r\n            float32View[index++] = uvs[i2];\r\n            float32View[index++] = uvs[(i2) + 1];\r\n\r\n            uint32View[index++] = argb;\r\n            uint32View[index++] = darkColor;\r\n\r\n            uint32View[index++] = textureIdAndRound;\r\n        }\r\n    }\r\n\r\n    public packQuadAttributes(\r\n        element: DefaultBatchableQuadElement & { darkColor: number },\r\n        float32View: Float32Array,\r\n        uint32View: Uint32Array,\r\n        index: number,\r\n        textureId: number\r\n    )\r\n    {\r\n        const texture = element.texture;\r\n\r\n        const wt = element.transform;\r\n\r\n        const a = wt.a;\r\n        const b = wt.b;\r\n        const c = wt.c;\r\n        const d = wt.d;\r\n        const tx = wt.tx;\r\n        const ty = wt.ty;\r\n\r\n        const bounds = element.bounds;\r\n\r\n        const w0 = bounds.maxX;\r\n        const w1 = bounds.minX;\r\n        const h0 = bounds.maxY;\r\n        const h1 = bounds.minY;\r\n\r\n        const uvs = texture.uvs;\r\n\r\n        // _ _ _ _\r\n        // a b g r\r\n        const argb = element.color;\r\n        const darkColor = element.darkColor;\r\n\r\n        const textureIdAndRound = (textureId << 16) | (element.roundPixels & 0xFFFF);\r\n\r\n        float32View[index + 0] = (a * w1) + (c * h1) + tx;\r\n        float32View[index + 1] = (d * h1) + (b * w1) + ty;\r\n\r\n        float32View[index + 2] = uvs.x0;\r\n        float32View[index + 3] = uvs.y0;\r\n\r\n        uint32View[index + 4] = argb;\r\n        uint32View[index + 5] = darkColor;\r\n        uint32View[index + 6] = textureIdAndRound;\r\n\r\n        // xy\r\n        float32View[index + 7] = (a * w0) + (c * h1) + tx;\r\n        float32View[index + 8] = (d * h1) + (b * w0) + ty;\r\n\r\n        float32View[index + 9] = uvs.x1;\r\n        float32View[index + 10] = uvs.y1;\r\n\r\n        uint32View[index + 11] = argb;\r\n        uint32View[index + 12] = darkColor;\r\n        uint32View[index + 13] = textureIdAndRound;\r\n\r\n        // xy\r\n        float32View[index + 14] = (a * w0) + (c * h0) + tx;\r\n        float32View[index + 15] = (d * h0) + (b * w0) + ty;\r\n\r\n        float32View[index + 16] = uvs.x2;\r\n        float32View[index + 17] = uvs.y2;\r\n\r\n        uint32View[index + 18] = argb;\r\n        uint32View[index + 19] = darkColor;\r\n        uint32View[index + 20] = textureIdAndRound;\r\n\r\n        // xy\r\n        float32View[index + 21] = (a * w1) + (c * h0) + tx;\r\n        float32View[index + 22] = (d * h0) + (b * w1) + ty;\r\n\r\n        float32View[index + 23] = uvs.x3;\r\n        float32View[index + 24] = uvs.y3;\r\n\r\n        uint32View[index + 25] = argb;\r\n        uint32View[index + 26] = darkColor;\r\n        uint32View[index + 27] = textureIdAndRound;\r\n    }\r\n}\r\n\r\nextensions.add(DarkTintBatcher);\r\n"],"names":[],"mappings":"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"}