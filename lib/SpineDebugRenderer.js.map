{"version":3,"file":"SpineDebugRenderer.js","sources":["../src/SpineDebugRenderer.ts"],"sourcesContent":["/** ****************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Container, Graphics, Text } from 'pixi.js';\r\nimport { Spine } from './Spine';\r\nimport {\r\n    ClippingAttachment,\r\n    MeshAttachment,\r\n    PathAttachment,\r\n    RegionAttachment,\r\n    SkeletonBounds\r\n} from '@esotericsoftware/spine-core';\r\n\r\nimport type { AnimationStateListener } from '@esotericsoftware/spine-core';\r\n\r\n/**\r\n * Make a class that extends from this interface to create your own debug renderer.\r\n * @public\r\n */\r\nexport interface ISpineDebugRenderer\r\n{\r\n    /**\r\n     * This will be called every frame, after the spine has been updated.\r\n     */\r\n    renderDebug: (spine: Spine) => void;\r\n\r\n    /**\r\n     *  This is called when the `spine.debug` object is set to null or when the spine is destroyed.\r\n     */\r\n    unregisterSpine: (spine: Spine) => void;\r\n\r\n    /**\r\n     * This is called when the `spine.debug` object is set to a new instance of a debug renderer.\r\n     */\r\n    registerSpine: (spine: Spine) => void;\r\n}\r\n\r\ntype DebugDisplayObjects = {\r\n    bones: Container;\r\n    skeletonXY: Graphics;\r\n    regionAttachmentsShape: Graphics;\r\n    meshTrianglesLine: Graphics;\r\n    meshHullLine: Graphics;\r\n    clippingPolygon: Graphics;\r\n    boundingBoxesRect: Graphics;\r\n    boundingBoxesCircle: Graphics;\r\n    boundingBoxesPolygon: Graphics;\r\n    pathsCurve: Graphics;\r\n    pathsLine: Graphics;\r\n    parentDebugContainer: Container;\r\n    eventText: Container;\r\n    eventCallback: AnimationStateListener;\r\n};\r\n\r\n/**\r\n * This is a debug renderer that uses PixiJS Graphics under the hood.\r\n * @public\r\n */\r\nexport class SpineDebugRenderer implements ISpineDebugRenderer\r\n{\r\n    private readonly registeredSpines: Map<Spine, DebugDisplayObjects> = new Map();\r\n\r\n    public drawMeshHull = true;\r\n    public drawMeshTriangles = true;\r\n    public drawBones = true;\r\n    public drawPaths = true;\r\n    public drawBoundingBoxes = true;\r\n    public drawClipping = true;\r\n    public drawRegionAttachments = true;\r\n    public drawEvents = true;\r\n\r\n    public lineWidth = 1;\r\n    public regionAttachmentsColor = 0x0078ff;\r\n    public meshHullColor = 0x0078ff;\r\n    public meshTrianglesColor = 0xffcc00;\r\n    public clippingPolygonColor = 0xff00ff;\r\n    public boundingBoxesRectColor = 0x00ff00;\r\n    public boundingBoxesPolygonColor = 0x00ff00;\r\n    public boundingBoxesCircleColor = 0x00ff00;\r\n    public pathsCurveColor = 0xff0000;\r\n    public pathsLineColor = 0xff00ff;\r\n    public skeletonXYColor = 0xff0000;\r\n    public bonesColor = 0x00eecc;\r\n    public eventFontSize = 24;\r\n    public eventFontColor = 0x0;\r\n\r\n    /**\r\n     * The debug is attached by force to each spine object.\r\n     * So we need to create it inside the spine when we get the first update\r\n     */\r\n    public registerSpine(spine: Spine): void\r\n    {\r\n        if (this.registeredSpines.has(spine))\r\n        {\r\n            console.warn('SpineDebugRenderer.registerSpine() - this spine is already registered!', spine);\r\n\r\n            return;\r\n        }\r\n        const debugDisplayObjects: DebugDisplayObjects = {\r\n            parentDebugContainer: new Container(),\r\n            bones: new Container(),\r\n            skeletonXY: new Graphics(),\r\n            regionAttachmentsShape: new Graphics(),\r\n            meshTrianglesLine: new Graphics(),\r\n            meshHullLine: new Graphics(),\r\n            clippingPolygon: new Graphics(),\r\n            boundingBoxesRect: new Graphics(),\r\n            boundingBoxesCircle: new Graphics(),\r\n            boundingBoxesPolygon: new Graphics(),\r\n            pathsCurve: new Graphics(),\r\n            pathsLine: new Graphics(),\r\n            eventText: new Container(),\r\n            eventCallback: {\r\n                event: (_, event) =>\r\n                {\r\n                    if (this.drawEvents)\r\n                    {\r\n                        const scale = Math.abs(spine.scale.x || spine.scale.y || 1);\r\n                        const text = new Text({\r\n                            text: event.data.name,\r\n                            style: {\r\n                                fontSize: this.eventFontSize / scale,\r\n                                fill: this.eventFontColor,\r\n                                fontFamily: 'monospace'\r\n                            }\r\n                        });\r\n\r\n                        text.scale.x = Math.sign(spine.scale.x);\r\n                        text.anchor.set(0.5);\r\n                        debugDisplayObjects.eventText.addChild(text);\r\n                        setTimeout(() =>\r\n                        {\r\n                            if (!text.destroyed)\r\n                            {\r\n                                text.destroy();\r\n                            }\r\n                        }, 250);\r\n                    }\r\n                },\r\n            },\r\n        };\r\n\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.bones);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.skeletonXY);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.regionAttachmentsShape);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.meshTrianglesLine);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.meshHullLine);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.clippingPolygon);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesRect);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesCircle);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.boundingBoxesPolygon);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.pathsCurve);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.pathsLine);\r\n        debugDisplayObjects.parentDebugContainer.addChild(debugDisplayObjects.eventText);\r\n\r\n        (debugDisplayObjects.parentDebugContainer as any).zIndex = 9999999;\r\n\r\n        // Disable screen reader and mouse input on debug objects.\r\n        (debugDisplayObjects.parentDebugContainer as any).accessibleChildren = false;\r\n        (debugDisplayObjects.parentDebugContainer as any).eventMode = 'none';\r\n        (debugDisplayObjects.parentDebugContainer as any).interactiveChildren = false;\r\n\r\n        spine.addChild(debugDisplayObjects.parentDebugContainer);\r\n\r\n        spine.state.addListener(debugDisplayObjects.eventCallback);\r\n\r\n        this.registeredSpines.set(spine, debugDisplayObjects);\r\n    }\r\n\r\n    public renderDebug(spine: Spine): void\r\n    {\r\n        if (!this.registeredSpines.has(spine))\r\n        {\r\n            // This should never happen. Spines are registered when you assign spine.debug\r\n            this.registerSpine(spine);\r\n        }\r\n\r\n        const debugDisplayObjects = this.registeredSpines.get(spine);\r\n\r\n        if (!debugDisplayObjects)\r\n        {\r\n            return;\r\n        }\r\n        spine.addChild(debugDisplayObjects.parentDebugContainer);\r\n\r\n        debugDisplayObjects.skeletonXY.clear();\r\n        debugDisplayObjects.regionAttachmentsShape.clear();\r\n        debugDisplayObjects.meshTrianglesLine.clear();\r\n        debugDisplayObjects.meshHullLine.clear();\r\n        debugDisplayObjects.clippingPolygon.clear();\r\n        debugDisplayObjects.boundingBoxesRect.clear();\r\n        debugDisplayObjects.boundingBoxesCircle.clear();\r\n        debugDisplayObjects.boundingBoxesPolygon.clear();\r\n        debugDisplayObjects.pathsCurve.clear();\r\n        debugDisplayObjects.pathsLine.clear();\r\n\r\n        for (let len = debugDisplayObjects.bones.children.length; len > 0; len--)\r\n        {\r\n            debugDisplayObjects.bones.children[len - 1].destroy({ children: true, texture: true, textureSource: true });\r\n        }\r\n\r\n        const scale = Math.abs(spine.scale.x || spine.scale.y || 1);\r\n        const lineWidth = this.lineWidth / scale;\r\n\r\n        if (this.drawBones)\r\n        {\r\n            this.drawBonesFunc(spine, debugDisplayObjects, lineWidth, scale);\r\n        }\r\n\r\n        if (this.drawPaths)\r\n        {\r\n            this.drawPathsFunc(spine, debugDisplayObjects, lineWidth);\r\n        }\r\n\r\n        if (this.drawBoundingBoxes)\r\n        {\r\n            this.drawBoundingBoxesFunc(spine, debugDisplayObjects, lineWidth);\r\n        }\r\n\r\n        if (this.drawClipping)\r\n        {\r\n            this.drawClippingFunc(spine, debugDisplayObjects, lineWidth);\r\n        }\r\n\r\n        if (this.drawMeshHull || this.drawMeshTriangles)\r\n        {\r\n            this.drawMeshHullAndMeshTriangles(spine, debugDisplayObjects, lineWidth);\r\n        }\r\n\r\n        if (this.drawRegionAttachments)\r\n        {\r\n            this.drawRegionAttachmentsFunc(spine, debugDisplayObjects, lineWidth);\r\n        }\r\n\r\n        if (this.drawEvents)\r\n        {\r\n            for (const child of debugDisplayObjects.eventText.children)\r\n            {\r\n                child.alpha -= 0.05;\r\n                child.y -= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawBonesFunc(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number, scale: number): void\r\n    {\r\n        const skeleton = spine.skeleton;\r\n        const skeletonX = skeleton.x;\r\n        const skeletonY = skeleton.y;\r\n        const bones = skeleton.bones;\r\n\r\n        debugDisplayObjects.skeletonXY.strokeStyle = { width: lineWidth, color: this.skeletonXYColor };\r\n\r\n        for (let i = 0, len = bones.length; i < len; i++)\r\n        {\r\n            const bone = bones[i];\r\n            const boneLen = bone.data.length;\r\n            const starX = skeletonX + bone.worldX;\r\n            const starY = skeletonY + bone.worldY;\r\n            const endX = skeletonX + (boneLen * bone.a) + bone.worldX;\r\n            const endY = skeletonY + (boneLen * bone.b) + bone.worldY;\r\n\r\n            if (bone.data.name === 'root' || bone.data.parent === null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const w = Math.abs(starX - endX);\r\n            const h = Math.abs(starY - endY);\r\n            // a = w, // side length a\r\n            const a2 = Math.pow(w, 2); // square root of side length a\r\n            const b = h; // side length b\r\n            const b2 = Math.pow(h, 2); // square root of side length b\r\n            const c = Math.sqrt(a2 + b2); // side length c\r\n            const c2 = Math.pow(c, 2); // square root of side length c\r\n            const rad = Math.PI / 180;\r\n            // A = Math.acos([a2 + c2 - b2] / [2 * a * c]) || 0, // Angle A\r\n            // C = Math.acos([a2 + b2 - c2] / [2 * a * b]) || 0, // C angle\r\n            const B = Math.acos((c2 + b2 - a2) / (2 * b * c)) || 0; // angle of corner B\r\n\r\n            if (c === 0)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const gp = new Graphics();\r\n\r\n            debugDisplayObjects.bones.addChild(gp);\r\n\r\n            // draw bone\r\n            const refRation = c / 50 / scale;\r\n\r\n            gp.context\r\n                .poly([0, 0, 0 - refRation, c - (refRation * 3), 0, c - refRation, 0 + refRation, c - (refRation * 3)])\r\n                .fill(this.bonesColor);\r\n            gp.x = starX;\r\n            gp.y = starY;\r\n            gp.pivot.y = c;\r\n\r\n            // Calculate bone rotation angle\r\n            let rotation = 0;\r\n\r\n            if (starX < endX && starY < endY)\r\n            {\r\n                // bottom right\r\n                rotation = -B + (180 * rad);\r\n            }\r\n            else if (starX > endX && starY < endY)\r\n            {\r\n                // bottom left\r\n                rotation = 180 * (rad + B);\r\n            }\r\n            else if (starX > endX && starY > endY)\r\n            {\r\n                // top left\r\n                rotation = -B;\r\n            }\r\n            else if (starX < endX && starY > endY)\r\n            {\r\n                // bottom left\r\n                rotation = B;\r\n            }\r\n            else if (starY === endY && starX < endX)\r\n            {\r\n                // To the right\r\n                rotation = 90 * rad;\r\n            }\r\n            else if (starY === endY && starX > endX)\r\n            {\r\n                // go left\r\n                rotation = -90 * rad;\r\n            }\r\n            else if (starX === endX && starY < endY)\r\n            {\r\n                // down\r\n                rotation = 180 * rad;\r\n            }\r\n            else if (starX === endX && starY > endY)\r\n            {\r\n                // up\r\n                rotation = 0;\r\n            }\r\n            gp.rotation = rotation;\r\n\r\n            // Draw the starting rotation point of the bone\r\n            gp.circle(0, c, refRation * 1.2)\r\n                .fill({ color: 0x000000, alpha: 0.6 })\r\n                .stroke({ width: lineWidth, color: this.skeletonXYColor });\r\n        }\r\n\r\n        // Draw the skeleton starting point \"X\" form\r\n        const startDotSize = lineWidth * 3;\r\n\r\n        debugDisplayObjects.skeletonXY.context\r\n            .moveTo(skeletonX - startDotSize, skeletonY - startDotSize)\r\n            .lineTo(skeletonX + startDotSize, skeletonY + startDotSize)\r\n            .moveTo(skeletonX + startDotSize, skeletonY - startDotSize)\r\n            .lineTo(skeletonX - startDotSize, skeletonY + startDotSize)\r\n            .stroke();\r\n    }\r\n\r\n    private drawRegionAttachmentsFunc(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number): void\r\n    {\r\n        const skeleton = spine.skeleton;\r\n        const slots = skeleton.slots;\r\n\r\n        for (let i = 0, len = slots.length; i < len; i++)\r\n        {\r\n            const slot = slots[i];\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment === null || !(attachment instanceof RegionAttachment))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const regionAttachment = attachment;\r\n\r\n            const vertices = new Float32Array(8);\r\n\r\n            regionAttachment.computeWorldVertices(slot, vertices, 0, 2);\r\n\r\n            debugDisplayObjects.regionAttachmentsShape.poly(Array.from(vertices.slice(0, 8)));\r\n        }\r\n\r\n        debugDisplayObjects.regionAttachmentsShape.stroke({\r\n            color: this.regionAttachmentsColor,\r\n            width: lineWidth\r\n        });\r\n    }\r\n\r\n    private drawMeshHullAndMeshTriangles(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number): void\r\n    {\r\n        const skeleton = spine.skeleton;\r\n        const slots = skeleton.slots;\r\n\r\n        for (let i = 0, len = slots.length; i < len; i++)\r\n        {\r\n            const slot = slots[i];\r\n\r\n            if (!slot.bone.active)\r\n            {\r\n                continue;\r\n            }\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment === null || !(attachment instanceof MeshAttachment))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const meshAttachment = attachment;\r\n\r\n            const vertices = new Float32Array(meshAttachment.worldVerticesLength);\r\n            const triangles = meshAttachment.triangles;\r\n            let hullLength = meshAttachment.hullLength;\r\n\r\n            meshAttachment.computeWorldVertices(slot, 0, meshAttachment.worldVerticesLength, vertices, 0, 2);\r\n            // draw the skinned mesh (triangle)\r\n            if (this.drawMeshTriangles)\r\n            {\r\n                for (let i = 0, len = triangles.length; i < len; i += 3)\r\n                {\r\n                    const v1 = triangles[i] * 2;\r\n                    const v2 = triangles[i + 1] * 2;\r\n                    const v3 = triangles[i + 2] * 2;\r\n\r\n                    debugDisplayObjects.meshTrianglesLine.context\r\n                        .moveTo(vertices[v1], vertices[v1 + 1])\r\n                        .lineTo(vertices[v2], vertices[v2 + 1])\r\n                        .lineTo(vertices[v3], vertices[v3 + 1]);\r\n                }\r\n            }\r\n\r\n            // draw skin border\r\n            if (this.drawMeshHull && hullLength > 0)\r\n            {\r\n                hullLength = (hullLength >> 1) * 2;\r\n                let lastX = vertices[hullLength - 2];\r\n                let lastY = vertices[hullLength - 1];\r\n\r\n                for (let i = 0, len = hullLength; i < len; i += 2)\r\n                {\r\n                    const x = vertices[i];\r\n                    const y = vertices[i + 1];\r\n\r\n                    debugDisplayObjects.meshHullLine.context\r\n                        .moveTo(x, y)\r\n                        .lineTo(lastX, lastY);\r\n                    lastX = x;\r\n                    lastY = y;\r\n                }\r\n            }\r\n        }\r\n\r\n        debugDisplayObjects.meshHullLine.stroke({ width: lineWidth, color: this.meshHullColor });\r\n        debugDisplayObjects.meshTrianglesLine.stroke({ width: lineWidth, color: this.meshTrianglesColor });\r\n    }\r\n\r\n    drawClippingFunc(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number): void\r\n    {\r\n        const skeleton = spine.skeleton;\r\n        const slots = skeleton.slots;\r\n\r\n        for (let i = 0, len = slots.length; i < len; i++)\r\n        {\r\n            const slot = slots[i];\r\n\r\n            if (!slot.bone.active)\r\n            {\r\n                continue;\r\n            }\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment === null || !(attachment instanceof ClippingAttachment))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const clippingAttachment = attachment;\r\n\r\n            const nn = clippingAttachment.worldVerticesLength;\r\n            const world = new Float32Array(nn);\r\n\r\n            clippingAttachment.computeWorldVertices(slot, 0, nn, world, 0, 2);\r\n            debugDisplayObjects.clippingPolygon.poly(Array.from(world));\r\n        }\r\n\r\n        debugDisplayObjects.clippingPolygon.stroke({\r\n            width: lineWidth, color: this.clippingPolygonColor, alpha: 1\r\n        });\r\n    }\r\n\r\n    drawBoundingBoxesFunc(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number): void\r\n    {\r\n        // draw the total outline of the bounding box\r\n        debugDisplayObjects.boundingBoxesRect.lineStyle(lineWidth, this.boundingBoxesRectColor, 5);\r\n\r\n        const bounds = new SkeletonBounds();\r\n\r\n        bounds.update(spine.skeleton, true);\r\n\r\n        debugDisplayObjects.boundingBoxesRect\r\n            .rect(bounds.minX, bounds.minY, bounds.getWidth(), bounds.getHeight())\r\n            .stroke({ width: lineWidth, color: this.boundingBoxesRectColor });\r\n\r\n        const polygons = bounds.polygons;\r\n        const drawPolygon = (polygonVertices: ArrayLike<number>, _offset: unknown, count: number): void =>\r\n        {\r\n            if (count < 3)\r\n            {\r\n                throw new Error('Polygon must contain at least 3 vertices');\r\n            }\r\n            const paths:number[] = [];\r\n            const dotSize = lineWidth * 2;\r\n\r\n            for (let i = 0, len = polygonVertices.length; i < len; i += 2)\r\n            {\r\n                const x1 = polygonVertices[i];\r\n                const y1 = polygonVertices[i + 1];\r\n\r\n                // draw the bounding box node\r\n                debugDisplayObjects.boundingBoxesCircle.beginFill(this.boundingBoxesCircleColor);\r\n                debugDisplayObjects.boundingBoxesCircle.drawCircle(x1, y1, dotSize);\r\n                debugDisplayObjects.boundingBoxesCircle.fill(0);\r\n\r\n                paths.push(x1, y1);\r\n            }\r\n\r\n            // draw the bounding box area\r\n            debugDisplayObjects.boundingBoxesPolygon\r\n                .poly(paths)\r\n                .fill({\r\n                    color: this.boundingBoxesPolygonColor,\r\n                    alpha: 0.1\r\n                })\r\n                .stroke({\r\n                    width: lineWidth,\r\n                    color: this.boundingBoxesPolygonColor\r\n                });\r\n        };\r\n\r\n        for (let i = 0, len = polygons.length; i < len; i++)\r\n        {\r\n            const polygon = polygons[i];\r\n\r\n            drawPolygon(polygon, 0, polygon.length);\r\n        }\r\n    }\r\n\r\n    private drawPathsFunc(spine: Spine, debugDisplayObjects: DebugDisplayObjects, lineWidth: number): void\r\n    {\r\n        const skeleton = spine.skeleton;\r\n        const slots = skeleton.slots;\r\n\r\n        for (let i = 0, len = slots.length; i < len; i++)\r\n        {\r\n            const slot = slots[i];\r\n\r\n            if (!slot.bone.active)\r\n            {\r\n                continue;\r\n            }\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment === null || !(attachment instanceof PathAttachment))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            const pathAttachment = attachment;\r\n            let nn = pathAttachment.worldVerticesLength;\r\n            const world = new Float32Array(nn);\r\n\r\n            pathAttachment.computeWorldVertices(slot, 0, nn, world, 0, 2);\r\n            let x1 = world[2];\r\n            let y1 = world[3];\r\n            let x2 = 0;\r\n            let y2 = 0;\r\n\r\n            if (pathAttachment.closed)\r\n            {\r\n                const cx1 = world[0];\r\n                const cy1 = world[1];\r\n                const cx2 = world[nn - 2];\r\n                const cy2 = world[nn - 1];\r\n\r\n                x2 = world[nn - 4];\r\n                y2 = world[nn - 3];\r\n\r\n                // curve\r\n                debugDisplayObjects.pathsCurve.moveTo(x1, y1);\r\n                debugDisplayObjects.pathsCurve.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);\r\n\r\n                // handle\r\n                debugDisplayObjects.pathsLine.moveTo(x1, y1);\r\n                debugDisplayObjects.pathsLine.lineTo(cx1, cy1);\r\n                debugDisplayObjects.pathsLine.moveTo(x2, y2);\r\n                debugDisplayObjects.pathsLine.lineTo(cx2, cy2);\r\n            }\r\n            nn -= 4;\r\n            for (let ii = 4; ii < nn; ii += 6)\r\n            {\r\n                const cx1 = world[ii];\r\n                const cy1 = world[ii + 1];\r\n                const cx2 = world[ii + 2];\r\n                const cy2 = world[ii + 3];\r\n\r\n                x2 = world[ii + 4];\r\n                y2 = world[ii + 5];\r\n                // curve\r\n                debugDisplayObjects.pathsCurve.moveTo(x1, y1);\r\n                debugDisplayObjects.pathsCurve.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);\r\n\r\n                // handle\r\n                debugDisplayObjects.pathsLine.moveTo(x1, y1);\r\n                debugDisplayObjects.pathsLine.lineTo(cx1, cy1);\r\n                debugDisplayObjects.pathsLine.moveTo(x2, y2);\r\n                debugDisplayObjects.pathsLine.lineTo(cx2, cy2);\r\n                x1 = x2;\r\n                y1 = y2;\r\n            }\r\n        }\r\n\r\n        debugDisplayObjects.pathsCurve.stroke({ width: lineWidth, color: this.pathsCurveColor });\r\n        debugDisplayObjects.pathsLine.stroke({ width: lineWidth, color: this.pathsLineColor });\r\n    }\r\n\r\n    public unregisterSpine(spine: Spine): void\r\n    {\r\n        if (!this.registeredSpines.has(spine))\r\n        {\r\n            console.warn('SpineDebugRenderer.unregisterSpine() - spine is not registered, can\\'t unregister!', spine);\r\n        }\r\n        const debugDisplayObjects = this.registeredSpines.get(spine);\r\n\r\n        if (!debugDisplayObjects)\r\n        {\r\n            return;\r\n        }\r\n\r\n        spine.state.removeListener(debugDisplayObjects.eventCallback);\r\n\r\n        debugDisplayObjects.parentDebugContainer.destroy({ textureSource: true, children: true, texture: true });\r\n        this.registeredSpines.delete(spine);\r\n    }\r\n}\r\n"],"names":["Container","Graphics","Text","RegionAttachment","MeshAttachment","i","len","ClippingAttachment","SkeletonBounds","PathAttachment"],"mappings":"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"}