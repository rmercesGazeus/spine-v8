{"version":3,"file":"Spine.js","sources":["../src/Spine.ts"],"sourcesContent":["/** ****************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport {\r\n    Assets,\r\n    Bounds,\r\n    Cache,\r\n    Container,\r\n    ContainerOptions,\r\n    DEG_TO_RAD,\r\n    DestroyOptions,\r\n    PointData,\r\n    Texture,\r\n    Ticker,\r\n    ViewContainer,\r\n} from 'pixi.js';\r\nimport { ISpineDebugRenderer } from './SpineDebugRenderer';\r\nimport {\r\n    AnimationState,\r\n    AnimationStateData,\r\n    AtlasAttachmentLoader,\r\n    Attachment,\r\n    Bone,\r\n    ClippingAttachment,\r\n    Color,\r\n    MeshAttachment,\r\n    Physics,\r\n    RegionAttachment,\r\n    Skeleton,\r\n    SkeletonBinary,\r\n    SkeletonBounds,\r\n    SkeletonClipping,\r\n    SkeletonData,\r\n    SkeletonJson,\r\n    Slot,\r\n    type TextureAtlas,\r\n    TrackEntry,\r\n    Vector2,\r\n} from '@esotericsoftware/spine-core';\r\n\r\nexport type SpineFromOptions = {\r\n    skeleton: string;\r\n    atlas: string;\r\n    scale?: number;\r\n};\r\n\r\nconst vectorAux = new Vector2();\r\nconst lightColor = new Color();\r\nconst darkColor = new Color();\r\n\r\nSkeleton.yDown = true;\r\n\r\nconst clipper = new SkeletonClipping();\r\n\r\nexport interface SpineOptions extends ContainerOptions\r\n{\r\n    skeletonData: SkeletonData;\r\n    autoUpdate?: boolean;\r\n}\r\n\r\nexport interface SpineEvents\r\n{\r\n    complete: [trackEntry: TrackEntry];\r\n    dispose: [trackEntry: TrackEntry];\r\n    end: [trackEntry: TrackEntry];\r\n    event: [trackEntry: TrackEntry, event: Event];\r\n    interrupt: [trackEntry: TrackEntry];\r\n    start: [trackEntry: TrackEntry];\r\n}\r\n\r\nexport interface AttachmentCacheData\r\n{\r\n    id: string;\r\n    clipped: boolean;\r\n    vertices: Float32Array;\r\n    uvs: Float32Array;\r\n    indices: number[];\r\n    color: Color;\r\n    darkColor: Color | null;\r\n    darkTint: boolean;\r\n    skipRender: boolean;\r\n    texture: Texture;\r\n    clippedData?: {\r\n        vertices: Float32Array;\r\n        uvs: Float32Array;\r\n        indices: Uint16Array;\r\n        vertexCount: number;\r\n        indicesCount: number;\r\n    };\r\n}\r\n\r\nexport class Spine extends ViewContainer\r\n{\r\n    // Pixi properties\r\n    public batched = true;\r\n    public buildId = 0;\r\n    public override readonly renderPipeId = 'spine';\r\n    public _didSpineUpdate = false;\r\n\r\n    public beforeUpdateWorldTransforms: (object: Spine) => void = () => { /** */ };\r\n    public afterUpdateWorldTransforms: (object: Spine) => void = () => { /** */ };\r\n\r\n    // Spine properties\r\n    public skeleton: Skeleton;\r\n    public state: AnimationState;\r\n    public skeletonBounds: SkeletonBounds;\r\n    private _debug?: ISpineDebugRenderer | undefined = undefined;\r\n\r\n    readonly _slotsObject: Record<string, {slot:Slot, container:Container}> = Object.create(null);\r\n\r\n    private getSlotFromRef(slotRef: number | string | Slot): Slot\r\n    {\r\n        let slot: Slot | null;\r\n\r\n        if (typeof slotRef === 'number') slot = this.skeleton.slots[slotRef];\r\n        else if (typeof slotRef === 'string') slot = this.skeleton.findSlot(slotRef);\r\n        else slot = slotRef;\r\n\r\n        if (!slot) throw new Error(`No slot found with the given slot reference: ${slotRef}`);\r\n\r\n        return slot;\r\n    }\r\n\r\n    public spineAttachmentsDirty = true;\r\n    public spineTexturesDirty = true;\r\n\r\n    private _lastAttachments: Attachment[];\r\n\r\n    private _stateChanged = true;\r\n    private attachmentCacheData: Record<string, AttachmentCacheData>[] = [];\r\n\r\n    public get debug(): ISpineDebugRenderer | undefined\r\n    {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(value: ISpineDebugRenderer | undefined)\r\n    {\r\n        if (this._debug)\r\n        {\r\n            this._debug.unregisterSpine(this);\r\n        }\r\n        if (value)\r\n        {\r\n            value.registerSpine(this);\r\n        }\r\n        this._debug = value;\r\n    }\r\n\r\n    private autoUpdateWarned = false;\r\n    private _autoUpdate = true;\r\n\r\n    public get autoUpdate(): boolean\r\n    {\r\n        return this._autoUpdate;\r\n    }\r\n\r\n    public set autoUpdate(value: boolean)\r\n    {\r\n        if (value)\r\n        {\r\n            Ticker.shared.add(this.internalUpdate, this);\r\n            this.autoUpdateWarned = false;\r\n        }\r\n        else\r\n        {\r\n            Ticker.shared.remove(this.internalUpdate, this);\r\n        }\r\n\r\n        this._autoUpdate = value;\r\n    }\r\n\r\n    constructor(options: SpineOptions | SkeletonData)\r\n    {\r\n        if (options instanceof SkeletonData)\r\n        {\r\n            options = {\r\n                skeletonData: options,\r\n            };\r\n        }\r\n\r\n        super();\r\n\r\n        const skeletonData = options instanceof SkeletonData ? options : options.skeletonData;\r\n\r\n        this.skeleton = new Skeleton(skeletonData);\r\n        this.state = new AnimationState(new AnimationStateData(skeletonData));\r\n        this.autoUpdate = options?.autoUpdate ?? true;\r\n\r\n        const slots = this.skeleton.slots;\r\n\r\n        for (let i = 0; i < slots.length; i++)\r\n        {\r\n            this.attachmentCacheData[i] = Object.create(null);\r\n        }\r\n\r\n        this._updateState(0);\r\n    }\r\n\r\n    public update(dt: number): void\r\n    {\r\n        if (this.autoUpdate && !this.autoUpdateWarned)\r\n        {\r\n            console.warn(\r\n                // eslint-disable-next-line max-len\r\n                'You are calling update on a Spine instance that has autoUpdate set to true. This is probably not what you want.',\r\n            );\r\n            this.autoUpdateWarned = true;\r\n        }\r\n\r\n        this.internalUpdate(0, dt);\r\n    }\r\n\r\n    protected internalUpdate(_deltaFrame: any, deltaSeconds?: number): void\r\n    {\r\n        // Because reasons, pixi uses deltaFrames at 60fps.\r\n        // We ignore the default deltaFrames and use the deltaSeconds from pixi ticker.\r\n        this._updateState(deltaSeconds ?? Ticker.shared.deltaMS / 1000);\r\n    }\r\n\r\n    get bounds()\r\n    {\r\n        if (this._boundsDirty)\r\n        {\r\n            this.updateBounds();\r\n        }\r\n\r\n        return this._bounds;\r\n    }\r\n\r\n    public setBonePosition(bone: string | Bone, position: PointData): void\r\n    {\r\n        const boneAux = bone;\r\n\r\n        if (typeof bone === 'string')\r\n        {\r\n            bone = this.skeleton.findBone(bone) as Bone;\r\n        }\r\n\r\n        if (!bone) throw Error(`Cant set bone position, bone ${String(boneAux)} not found`);\r\n        vectorAux.set(position.x, position.y);\r\n\r\n        if (bone.parent)\r\n        {\r\n            const aux = bone.parent.worldToLocal(vectorAux);\r\n\r\n            bone.x = aux.x;\r\n            bone.y = -aux.y;\r\n        }\r\n        else\r\n        {\r\n            bone.x = vectorAux.x;\r\n            bone.y = vectorAux.y;\r\n        }\r\n    }\r\n\r\n    public getBonePosition(bone: string | Bone, outPos?: PointData): PointData | undefined\r\n    {\r\n        const boneAux = bone;\r\n\r\n        if (typeof bone === 'string')\r\n        {\r\n            bone = this.skeleton.findBone(bone) as Bone;\r\n        }\r\n\r\n        if (!bone)\r\n        {\r\n            console.error(`Cant set bone position! Bone ${String(boneAux)} not found`);\r\n\r\n            return outPos;\r\n        }\r\n\r\n        if (!outPos)\r\n        {\r\n            outPos = { x: 0, y: 0 };\r\n        }\r\n\r\n        outPos.x = bone.worldX;\r\n        outPos.y = bone.worldY;\r\n\r\n        return outPos;\r\n    }\r\n\r\n    /**\r\n     * Will update the state based on the specified time, this will not apply the state to the skeleton\r\n     * as this is differed until the `applyState` method is called.\r\n     *\r\n     * @param time the time at which to set the state\r\n     * @internal\r\n     */\r\n    _updateState(time: number)\r\n    {\r\n        this.state.update(time);\r\n        this.skeleton.update(time);\r\n\r\n        this._stateChanged = true;\r\n\r\n        this._boundsDirty = true;\r\n\r\n        this.onViewUpdate();\r\n    }\r\n\r\n    /**\r\n     * Applies the state to this spine instance.\r\n     * - updates the state to the skeleton\r\n     * - updates its world transform (spine world transform)\r\n     * - validates the attachments - to flag if the attachments have changed this state\r\n     * - transforms the attachments - to update the vertices of the attachments based on the new positions\r\n     * - update the slot attachments - to update the position, rotation, scale, and visibility of the attached containers\r\n     * @internal\r\n     */\r\n    _applyState()\r\n    {\r\n        if (!this._stateChanged) return;\r\n        this._stateChanged = false;\r\n\r\n        const { skeleton } = this;\r\n\r\n        this.state.apply(skeleton);\r\n\r\n        this.beforeUpdateWorldTransforms(this);\r\n        skeleton.updateWorldTransform(Physics.update);\r\n        this.afterUpdateWorldTransforms(this);\r\n\r\n        this.validateAttachments();\r\n\r\n        this.transformAttachments();\r\n\r\n        this.updateSlotObjects();\r\n    }\r\n\r\n    private validateAttachments()\r\n    {\r\n        const currentDrawOrder = this.skeleton.drawOrder;\r\n\r\n        const lastAttachments = (this._lastAttachments ||= []);\r\n\r\n        let index = 0;\r\n\r\n        let spineAttachmentsDirty = false;\r\n\r\n        for (let i = 0; i < currentDrawOrder.length; i++)\r\n        {\r\n            const slot = currentDrawOrder[i];\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment)\r\n            {\r\n                if (attachment !== lastAttachments[index])\r\n                {\r\n                    spineAttachmentsDirty = true;\r\n                    lastAttachments[index] = attachment;\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n\r\n        if (index !== lastAttachments.length)\r\n        {\r\n            spineAttachmentsDirty = true;\r\n            lastAttachments.length = index;\r\n        }\r\n\r\n        this.spineAttachmentsDirty = spineAttachmentsDirty;\r\n    }\r\n\r\n    private transformAttachments()\r\n    {\r\n        const currentDrawOrder = this.skeleton.drawOrder;\r\n\r\n        for (let i = 0; i < currentDrawOrder.length; i++)\r\n        {\r\n            const slot = currentDrawOrder[i];\r\n\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment)\r\n            {\r\n                if (attachment instanceof MeshAttachment || attachment instanceof RegionAttachment)\r\n                {\r\n                    const cacheData = this._getCachedData(slot, attachment);\r\n\r\n                    if (attachment instanceof RegionAttachment)\r\n                    {\r\n                        attachment.computeWorldVertices(slot, cacheData.vertices, 0, 2);\r\n                    }\r\n                    else\r\n                    {\r\n                        attachment.computeWorldVertices(\r\n                            slot,\r\n                            0,\r\n                            attachment.worldVerticesLength,\r\n                            cacheData.vertices,\r\n                            0,\r\n                            2,\r\n                        );\r\n                    }\r\n\r\n                    cacheData.uvs = attachment.uvs as Float32Array;\r\n\r\n                    const skeleton = slot.bone.skeleton;\r\n                    const skeletonColor = skeleton.color;\r\n                    const slotColor = slot.color;\r\n\r\n                    const attachmentColor = attachment.color;\r\n\r\n                    cacheData.color.set(\r\n                        skeletonColor.r * slotColor.r * attachmentColor.r,\r\n                        skeletonColor.g * slotColor.g * attachmentColor.g,\r\n                        skeletonColor.b * slotColor.b * attachmentColor.b,\r\n                        skeletonColor.a * slotColor.a * attachmentColor.a,\r\n                    );\r\n\r\n                    cacheData.darkTint = !!slot.darkColor;\r\n\r\n                    if (slot.darkColor)\r\n                    {\r\n                        cacheData.darkColor.setFromColor(slot.darkColor);\r\n                    }\r\n\r\n                    cacheData.skipRender = cacheData.clipped = false;\r\n\r\n                    const texture = attachment.region?.texture.texture || Texture.EMPTY;\r\n\r\n                    if (cacheData.texture !== texture)\r\n                    {\r\n                        cacheData.texture = texture;\r\n                        this.spineTexturesDirty = true;\r\n                    }\r\n\r\n                    if (clipper.isClipping())\r\n                    {\r\n                        this.updateClippingData(cacheData);\r\n                    }\r\n                }\r\n                else if (attachment instanceof ClippingAttachment)\r\n                {\r\n                    clipper.clipStart(slot, attachment);\r\n                    continue;\r\n                }\r\n            }\r\n            clipper.clipEndWithSlot(slot);\r\n        }\r\n        clipper.clipEnd();\r\n    }\r\n\r\n    private updateClippingData(cacheData: AttachmentCacheData)\r\n    {\r\n        cacheData.clipped = true;\r\n\r\n        clipper.clipTriangles(\r\n            cacheData.vertices,\r\n            cacheData.vertices.length,\r\n            cacheData.indices,\r\n            cacheData.indices.length,\r\n            cacheData.uvs,\r\n            lightColor,\r\n            darkColor,\r\n            false,\r\n        );\r\n\r\n        const { clippedVertices, clippedTriangles } = clipper;\r\n\r\n        const verticesCount = clippedVertices.length / 8;\r\n        const indicesCount = clippedTriangles.length;\r\n\r\n        if (!cacheData.clippedData)\r\n        {\r\n            cacheData.clippedData = {\r\n                vertices: new Float32Array(verticesCount * 2),\r\n                uvs: new Float32Array(verticesCount * 2),\r\n                vertexCount: verticesCount,\r\n                indices: new Uint16Array(indicesCount),\r\n                indicesCount,\r\n            };\r\n\r\n            this.spineAttachmentsDirty = true;\r\n        }\r\n\r\n        const clippedData = cacheData.clippedData;\r\n\r\n        const sizeChange = clippedData.vertexCount !== verticesCount || indicesCount !== clippedData.indicesCount;\r\n\r\n        cacheData.skipRender = verticesCount === 0;\r\n\r\n        if (sizeChange)\r\n        {\r\n            this.spineAttachmentsDirty = true;\r\n\r\n            if (clippedData.vertexCount < verticesCount)\r\n            {\r\n                // buffer reuse!\r\n                clippedData.vertices = new Float32Array(verticesCount * 2);\r\n                clippedData.uvs = new Float32Array(verticesCount * 2);\r\n            }\r\n\r\n            if (clippedData.indices.length < indicesCount)\r\n            {\r\n                clippedData.indices = new Uint16Array(indicesCount);\r\n            }\r\n        }\r\n\r\n        const { vertices, uvs, indices } = clippedData;\r\n\r\n        for (let i = 0; i < verticesCount; i++)\r\n        {\r\n            vertices[i * 2] = clippedVertices[i * 8];\r\n            vertices[(i * 2) + 1] = clippedVertices[(i * 8) + 1];\r\n\r\n            uvs[i * 2] = clippedVertices[(i * 8) + 6];\r\n            uvs[(i * 2) + 1] = clippedVertices[(i * 8) + 7];\r\n        }\r\n\r\n        clippedData.vertexCount = verticesCount;\r\n\r\n        for (let i = 0; i < indices.length; i++)\r\n        {\r\n            indices[i] = clippedTriangles[i];\r\n        }\r\n\r\n        clippedData.indicesCount = indicesCount;\r\n    }\r\n\r\n    /**\r\n     * ensure that attached containers map correctly to their slots\r\n     * along with their position, rotation, scale, and visibility.\r\n     */\r\n    private updateSlotObjects()\r\n    {\r\n        for (const i in this._slotsObject)\r\n        {\r\n            const slotAttachment = this._slotsObject[i];\r\n\r\n            if (!slotAttachment) continue;\r\n\r\n            this.updateSlotObject(slotAttachment);\r\n        }\r\n    }\r\n\r\n    private updateSlotObject(slotAttachment: {slot:Slot, container:Container})\r\n    {\r\n        const { slot, container } = slotAttachment;\r\n\r\n        container.visible = this.skeleton.drawOrder.includes(slot);\r\n\r\n        if (container.visible)\r\n        {\r\n            const bone = slot.bone;\r\n\r\n            container.position.set(bone.worldX, bone.worldY);\r\n\r\n            container.scale.x = bone.getWorldScaleX();\r\n            container.scale.y = bone.getWorldScaleY();\r\n\r\n            container.rotation = bone.getWorldRotationX() * DEG_TO_RAD;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    _getCachedData(slot: Slot, attachment: RegionAttachment | MeshAttachment): AttachmentCacheData\r\n    {\r\n        return this.attachmentCacheData[slot.data.index][attachment.name] || this.initCachedData(slot, attachment);\r\n    }\r\n\r\n    private initCachedData(slot: Slot, attachment: RegionAttachment | MeshAttachment): AttachmentCacheData\r\n    {\r\n        let vertices: Float32Array;\r\n\r\n        if (attachment instanceof RegionAttachment)\r\n        {\r\n            vertices = new Float32Array(8);\r\n\r\n            this.attachmentCacheData[slot.data.index][attachment.name] = {\r\n                id: `${slot.data.index}-${attachment.name}`,\r\n                vertices,\r\n                clipped: false,\r\n                indices: [0, 1, 2, 0, 2, 3],\r\n                uvs: attachment.uvs as Float32Array,\r\n                color: new Color(1, 1, 1, 1),\r\n                darkColor: new Color(0, 0, 0, 0),\r\n                darkTint: false,\r\n                skipRender: false,\r\n                texture: attachment.region?.texture.texture,\r\n            };\r\n        }\r\n        else\r\n        {\r\n            vertices = new Float32Array(attachment.worldVerticesLength);\r\n\r\n            this.attachmentCacheData[slot.data.index][attachment.name] = {\r\n                id: `${slot.data.index}-${attachment.name}`,\r\n                vertices,\r\n                clipped: false,\r\n                indices: attachment.triangles,\r\n                uvs: attachment.uvs as Float32Array,\r\n                color: new Color(1, 1, 1, 1),\r\n                darkColor: new Color(0, 0, 0, 0),\r\n                darkTint: false,\r\n                skipRender: false,\r\n                texture: attachment.region?.texture.texture,\r\n            };\r\n        }\r\n\r\n        return this.attachmentCacheData[slot.data.index][attachment.name];\r\n    }\r\n\r\n    protected onViewUpdate()\r\n    {\r\n        // increment from the 12th bit!\r\n        this._didChangeId += 1 << 12;\r\n\r\n        this._boundsDirty = true;\r\n\r\n        if (this.didViewUpdate) return;\r\n        this.didViewUpdate = true;\r\n\r\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\r\n\r\n        if (renderGroup)\r\n        {\r\n            renderGroup.onChildViewUpdate(this);\r\n        }\r\n\r\n        this.debug?.renderDebug(this);\r\n    }\r\n\r\n    /**\r\n     * Attaches a PixiJS container to a specified slot. This will map the world transform of the slots bone\r\n     * to the attached container. A container can only be attached to one slot at a time.\r\n     *\r\n     * @param container - The container to attach to the slot\r\n     * @param slotRef - The slot id or  slot to attach to\r\n     */\r\n    public addSlotObject(slot: number | string | Slot, container: Container)\r\n    {\r\n        slot = this.getSlotFromRef(slot);\r\n\r\n        // need to check in on the container too...\r\n        for (const i in this._slotsObject)\r\n        {\r\n            if (this._slotsObject[i]?.container === container)\r\n            {\r\n                this.removeSlotObject(this._slotsObject[i].slot);\r\n            }\r\n        }\r\n\r\n        this.removeSlotObject(slot);\r\n\r\n        container.includeInBuild = false;\r\n\r\n        // TODO only add once??\r\n        this.addChild(container);\r\n\r\n        this._slotsObject[slot.data.name] = {\r\n            container,\r\n            slot\r\n        };\r\n\r\n        this.updateSlotObject(this._slotsObject[slot.data.name]);\r\n    }\r\n\r\n    /**\r\n     * Removes a PixiJS container from the slot it is attached to.\r\n     *\r\n     * @param container - The container to detach from the slot\r\n     * @param slotOrContainer - The container, slot id or slot to detach from\r\n     */\r\n    public removeSlotObject(slotOrContainer: number | string | Slot | Container)\r\n    {\r\n        let containerToRemove: Container | undefined;\r\n\r\n        if (slotOrContainer instanceof Container)\r\n        {\r\n            for (const i in this._slotsObject)\r\n            {\r\n                if (this._slotsObject[i]?.container === slotOrContainer)\r\n                {\r\n                    this._slotsObject[i] = null;\r\n\r\n                    containerToRemove = slotOrContainer;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const slot = this.getSlotFromRef(slotOrContainer);\r\n\r\n            containerToRemove = this._slotsObject[slot.data.name]?.container;\r\n            this._slotsObject[slot.data.name] = null;\r\n        }\r\n\r\n        if (containerToRemove)\r\n        {\r\n            this.removeChild(containerToRemove);\r\n\r\n            containerToRemove.includeInBuild = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a container attached to a slot, or undefined if no container is attached.\r\n     *\r\n     * @param slotRef - The slot id or slot to get the attachment from\r\n     * @returns - The container attached to the slot\r\n     */\r\n    public getSlotObject(slot: number | string | Slot)\r\n    {\r\n        slot = this.getSlotFromRef(slot);\r\n\r\n        return this._slotsObject[slot.data.name].container;\r\n    }\r\n\r\n    private updateBounds()\r\n    {\r\n        this._boundsDirty = false;\r\n\r\n        this.skeletonBounds ||= new SkeletonBounds();\r\n\r\n        const skeletonBounds = this.skeletonBounds;\r\n\r\n        skeletonBounds.update(this.skeleton, true);\r\n\r\n        if (skeletonBounds.minX === Infinity)\r\n        {\r\n            this._applyState();\r\n\r\n            const drawOrder = this.skeleton.drawOrder;\r\n            const bounds = this._bounds;\r\n\r\n            bounds.clear();\r\n\r\n            for (let i = 0; i < drawOrder.length; i++)\r\n            {\r\n                const slot = drawOrder[i];\r\n\r\n                const attachment = slot.getAttachment();\r\n\r\n                if (attachment && (attachment instanceof RegionAttachment || attachment instanceof MeshAttachment))\r\n                {\r\n                    const cacheData = this._getCachedData(slot, attachment);\r\n\r\n                    bounds.addVertexData(cacheData.vertices, 0, cacheData.vertices.length);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this._bounds.minX = skeletonBounds.minX;\r\n            this._bounds.minY = skeletonBounds.minY;\r\n            this._bounds.maxX = skeletonBounds.maxX;\r\n            this._bounds.maxY = skeletonBounds.maxY;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    addBounds(bounds: Bounds)\r\n    {\r\n        bounds.addBounds(this.bounds);\r\n    }\r\n\r\n    /**\r\n     * Destroys this sprite renderable and optionally its texture.\r\n     * @param options - Options parameter. A boolean will act as if all options\r\n     *  have been set to that value\r\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\r\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\r\n     */\r\n    public override destroy(options: DestroyOptions = false)\r\n    {\r\n        super.destroy(options);\r\n\r\n        Ticker.shared.remove(this.internalUpdate, this);\r\n        this.state.clearListeners();\r\n        this.debug = undefined;\r\n        this.skeleton = null as any;\r\n        this.state = null as any;\r\n        (this._slotsObject as any) = null;\r\n        this._lastAttachments = null;\r\n        this.attachmentCacheData = null as any;\r\n    }\r\n\r\n    /** Converts a point from the skeleton coordinate system to the Pixi world coordinate system. */\r\n    public skeletonToPixiWorldCoordinates(point: { x: number; y: number })\r\n    {\r\n        this.worldTransform.apply(point, point);\r\n    }\r\n\r\n    /** Converts a point from the Pixi world coordinate system to the skeleton coordinate system. */\r\n    public pixiWorldCoordinatesToSkeleton(point: { x: number; y: number })\r\n    {\r\n        this.worldTransform.applyInverse(point, point);\r\n    }\r\n\r\n    /** Converts a point from the Pixi world coordinate system to the bone's local coordinate system. */\r\n    public pixiWorldCoordinatesToBone(point: { x: number; y: number }, bone: Bone)\r\n    {\r\n        this.pixiWorldCoordinatesToSkeleton(point);\r\n        if (bone.parent)\r\n        {\r\n            bone.parent.worldToLocal(point as Vector2);\r\n        }\r\n        else\r\n        {\r\n            bone.worldToLocal(point as Vector2);\r\n        }\r\n    }\r\n\r\n    static from({ skeleton, atlas, scale = 1 }: SpineFromOptions)\r\n    {\r\n        const cacheKey = `${skeleton}-${atlas}-${scale}`;\r\n\r\n        if (Cache.has(cacheKey))\r\n        {\r\n            return new Spine(Cache.get<SkeletonData>(cacheKey));\r\n        }\r\n\r\n        const skeletonAsset = Assets.get<any | Uint8Array>(skeleton);\r\n\r\n        const atlasAsset = Assets.get<TextureAtlas>(atlas);\r\n        const attachmentLoader = new AtlasAttachmentLoader(atlasAsset);\r\n        // eslint-disable-next-line max-len\r\n        const parser\r\n            = skeletonAsset instanceof Uint8Array\r\n                ? new SkeletonBinary(attachmentLoader)\r\n                : new SkeletonJson(attachmentLoader);\r\n\r\n        // TODO scale?\r\n        parser.scale = scale;\r\n        const skeletonData = parser.readSkeletonData(skeletonAsset);\r\n\r\n        Cache.set(cacheKey, skeletonData);\r\n\r\n        return new Spine({\r\n            skeletonData,\r\n        });\r\n    }\r\n}\r\n"],"names":["Vector2","Color","Skeleton","SkeletonClipping","ViewContainer","SkeletonData","AnimationState","AnimationStateData","Ticker","Physics","MeshAttachment","RegionAttachment","Texture","ClippingAttachment","DEG_TO_RAD","Container","SkeletonBounds","Cache","Assets","AtlasAttachmentLoader","SkeletonBinary","SkeletonJson"],"mappings":"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"}