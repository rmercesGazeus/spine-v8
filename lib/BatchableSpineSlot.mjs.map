{"version":3,"file":"BatchableSpineSlot.mjs","sources":["../src/BatchableSpineSlot.ts"],"sourcesContent":["/** ****************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { AttachmentCacheData, Spine } from './Spine';\r\n\r\nimport type { Batch, Batcher, BLEND_MODES, DefaultBatchableMeshElement, Matrix, Texture } from 'pixi.js';\r\n\r\nexport class BatchableSpineSlot implements DefaultBatchableMeshElement\r\n{\r\n    indexOffset = 0;\r\n    attributeOffset = 0;\r\n\r\n    indexSize: number;\r\n    attributeSize: number;\r\n\r\n    batcherName = 'darkTint';\r\n\r\n    readonly packAsQuad = false;\r\n\r\n    renderable: Spine;\r\n\r\n    positions: Float32Array;\r\n    indices: number[] | Uint16Array;\r\n    uvs: Float32Array;\r\n\r\n    roundPixels: 0 | 1;\r\n    data: AttachmentCacheData;\r\n    blendMode: BLEND_MODES;\r\n\r\n    darkTint: number;\r\n\r\n    texture: Texture;\r\n\r\n    transform: Matrix;\r\n\r\n    // used internally by batcher specific..\r\n    // stored for efficient updating..\r\n    _textureId: number;\r\n    _attributeStart: number;\r\n    _indexStart: number;\r\n    _batcher: Batcher;\r\n    _batch: Batch;\r\n\r\n    get color()\r\n    {\r\n        const slotColor = this.data.color;\r\n\r\n        const parentColor:number = this.renderable.groupColor;\r\n        const parentAlpha:number = this.renderable.groupAlpha;\r\n        let abgr:number;\r\n\r\n        const mixedA = (slotColor.a * parentAlpha) * 255;\r\n\r\n        if (parentColor !== 0xFFFFFF)\r\n        {\r\n            const parentB = (parentColor >> 16) & 0xFF;\r\n            const parentG = (parentColor >> 8) & 0xFF;\r\n            const parentR = parentColor & 0xFF;\r\n\r\n            const mixedR = (slotColor.r * parentR);\r\n            const mixedG = (slotColor.g * parentG);\r\n            const mixedB = (slotColor.b * parentB);\r\n\r\n            abgr = ((mixedA) << 24) | (mixedB << 16) | (mixedG << 8) | mixedR;\r\n        }\r\n        else\r\n        {\r\n            abgr = ((mixedA) << 24) | ((slotColor.b * 255) << 16) | ((slotColor.g * 255) << 8) | (slotColor.r * 255);\r\n        }\r\n\r\n        return abgr;\r\n    }\r\n\r\n    get darkColor()\r\n    {\r\n        const darkColor = this.data.darkColor;\r\n\r\n        return ((darkColor.b * 255) << 16) | ((darkColor.g * 255) << 8) | (darkColor.r * 255);\r\n    }\r\n\r\n    get groupTransform() { return this.renderable.groupTransform; }\r\n\r\n    setData(\r\n        renderable:Spine,\r\n        data:AttachmentCacheData,\r\n        blendMode:BLEND_MODES,\r\n        roundPixels: 0 | 1)\r\n    {\r\n        this.renderable = renderable;\r\n        this.transform = renderable.groupTransform;\r\n        this.data = data;\r\n\r\n        if (data.clipped)\r\n        {\r\n            const clippedData = data.clippedData;\r\n\r\n            this.indexSize = clippedData.indicesCount;\r\n            this.attributeSize = clippedData.vertexCount;\r\n            this.positions = clippedData.vertices;\r\n            this.indices = clippedData.indices;\r\n            this.uvs = clippedData.uvs;\r\n        }\r\n        else\r\n        {\r\n            this.indexSize = data.indices.length;\r\n            this.attributeSize = data.vertices.length / 2;\r\n            this.positions = data.vertices;\r\n            this.indices = data.indices;\r\n            this.uvs = data.uvs;\r\n        }\r\n\r\n        this.texture = data.texture;\r\n        this.roundPixels = roundPixels;\r\n\r\n        this.blendMode = blendMode;\r\n\r\n        this.batcherName = data.darkTint ? 'darkTint' : 'default';\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAiCO,MAAM,kBACb,CAAA;AAAA,EADO,WAAA,GAAA;AAEH,IAAc,aAAA,CAAA,IAAA,EAAA,aAAA,EAAA,CAAA,CAAA,CAAA;AACd,IAAkB,aAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,CAAA,CAAA,CAAA;AAElB,IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAA;AAEA,IAAc,aAAA,CAAA,IAAA,EAAA,aAAA,EAAA,UAAA,CAAA,CAAA;AAEd,IAAA,aAAA,CAAA,IAAA,EAAS,YAAa,EAAA,KAAA,CAAA,CAAA;AAEtB,IAAA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAEA,IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAIA;AAAA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAEA,IAAI,KACJ,GAAA;AACI,IAAM,MAAA,SAAA,GAAY,KAAK,IAAK,CAAA,KAAA,CAAA;AAE5B,IAAM,MAAA,WAAA,GAAqB,KAAK,UAAW,CAAA,UAAA,CAAA;AAC3C,IAAM,MAAA,WAAA,GAAqB,KAAK,UAAW,CAAA,UAAA,CAAA;AAC3C,IAAI,IAAA,IAAA,CAAA;AAEJ,IAAM,MAAA,MAAA,GAAU,SAAU,CAAA,CAAA,GAAI,WAAe,GAAA,GAAA,CAAA;AAE7C,IAAA,IAAI,gBAAgB,QACpB,EAAA;AACI,MAAM,MAAA,OAAA,GAAW,eAAe,EAAM,GAAA,GAAA,CAAA;AACtC,MAAM,MAAA,OAAA,GAAW,eAAe,CAAK,GAAA,GAAA,CAAA;AACrC,MAAA,MAAM,UAAU,WAAc,GAAA,GAAA,CAAA;AAE9B,MAAM,MAAA,MAAA,GAAU,UAAU,CAAI,GAAA,OAAA,CAAA;AAC9B,MAAM,MAAA,MAAA,GAAU,UAAU,CAAI,GAAA,OAAA,CAAA;AAC9B,MAAM,MAAA,MAAA,GAAU,UAAU,CAAI,GAAA,OAAA,CAAA;AAE9B,MAAA,IAAA,GAAS,MAAW,IAAA,EAAA,GAAO,MAAU,IAAA,EAAA,GAAO,UAAU,CAAK,GAAA,MAAA,CAAA;AAAA,KAG/D,MAAA;AACI,MAAS,IAAA,GAAA,MAAA,IAAW,EAAQ,GAAA,SAAA,CAAU,CAAI,GAAA,GAAA,IAAQ,EAAQ,GAAA,SAAA,CAAU,CAAI,GAAA,GAAA,IAAQ,CAAM,GAAA,SAAA,CAAU,CAAI,GAAA,GAAA,CAAA;AAAA,KACxG;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,SACJ,GAAA;AACI,IAAM,MAAA,SAAA,GAAY,KAAK,IAAK,CAAA,SAAA,CAAA;AAE5B,IAAS,OAAA,SAAA,CAAU,IAAI,GAAQ,IAAA,EAAA,GAAQ,UAAU,CAAI,GAAA,GAAA,IAAQ,CAAM,GAAA,SAAA,CAAU,CAAI,GAAA,GAAA,CAAA;AAAA,GACrF;AAAA,EAEA,IAAI,cAAiB,GAAA;AAAE,IAAA,OAAO,KAAK,UAAW,CAAA,cAAA,CAAA;AAAA,GAAgB;AAAA,EAE9D,OACI,CAAA,UAAA,EACA,IACA,EAAA,SAAA,EACA,WACJ,EAAA;AACI,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAA,IAAA,CAAK,YAAY,UAAW,CAAA,cAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAEZ,IAAA,IAAI,KAAK,OACT,EAAA;AACI,MAAA,MAAM,cAAc,IAAK,CAAA,WAAA,CAAA;AAEzB,MAAA,IAAA,CAAK,YAAY,WAAY,CAAA,YAAA,CAAA;AAC7B,MAAA,IAAA,CAAK,gBAAgB,WAAY,CAAA,WAAA,CAAA;AACjC,MAAA,IAAA,CAAK,YAAY,WAAY,CAAA,QAAA,CAAA;AAC7B,MAAA,IAAA,CAAK,UAAU,WAAY,CAAA,OAAA,CAAA;AAC3B,MAAA,IAAA,CAAK,MAAM,WAAY,CAAA,GAAA,CAAA;AAAA,KAG3B,MAAA;AACI,MAAK,IAAA,CAAA,SAAA,GAAY,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC9B,MAAK,IAAA,CAAA,aAAA,GAAgB,IAAK,CAAA,QAAA,CAAS,MAAS,GAAA,CAAA,CAAA;AAC5C,MAAA,IAAA,CAAK,YAAY,IAAK,CAAA,QAAA,CAAA;AACtB,MAAA,IAAA,CAAK,UAAU,IAAK,CAAA,OAAA,CAAA;AACpB,MAAA,IAAA,CAAK,MAAM,IAAK,CAAA,GAAA,CAAA;AAAA,KACpB;AAEA,IAAA,IAAA,CAAK,UAAU,IAAK,CAAA,OAAA,CAAA;AACpB,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AAEnB,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAEjB,IAAK,IAAA,CAAA,WAAA,GAAc,IAAK,CAAA,QAAA,GAAW,UAAa,GAAA,SAAA,CAAA;AAAA,GACpD;AACJ;;;;"}