{"version":3,"file":"SpineTexture.js","sources":["../src/SpineTexture.ts"],"sourcesContent":["/** ****************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Texture as PixiTexture } from 'pixi.js';\r\nimport { BlendMode, Texture, TextureFilter, TextureWrap } from '@esotericsoftware/spine-core';\r\n\r\nimport type { BLEND_MODES, SCALE_MODE, TextureSource, WRAP_MODE } from 'pixi.js';\r\n\r\nexport class SpineTexture extends Texture\r\n{\r\n    private static readonly textureMap: Map<TextureSource, SpineTexture> = new Map<TextureSource, SpineTexture>();\r\n\r\n    public static from(texture: TextureSource): SpineTexture\r\n    {\r\n        if (SpineTexture.textureMap.has(texture))\r\n        {\r\n            return SpineTexture.textureMap.get(texture) as SpineTexture;\r\n        }\r\n\r\n        return new SpineTexture(texture);\r\n    }\r\n\r\n    public readonly texture: PixiTexture;\r\n\r\n    private constructor(image: TextureSource)\r\n    {\r\n        // Todo: maybe add error handling if you feed a video texture to spine?\r\n        super(image.resource);\r\n        this.texture = PixiTexture.from(image);\r\n    }\r\n\r\n    public setFilters(minFilter: TextureFilter, magFilter: TextureFilter): void\r\n    {\r\n        const style = this.texture.source.style;\r\n\r\n        style.minFilter = SpineTexture.toPixiTextureFilter(minFilter);\r\n        style.magFilter = SpineTexture.toPixiTextureFilter(magFilter);\r\n        this.texture.source.autoGenerateMipmaps = SpineTexture.toPixiMipMap(minFilter);\r\n        this.texture.source.updateMipmaps();\r\n    }\r\n\r\n    public setWraps(uWrap: TextureWrap, vWrap: TextureWrap): void\r\n    {\r\n        const style = this.texture.source.style;\r\n\r\n        style.addressModeU = SpineTexture.toPixiTextureWrap(uWrap);\r\n        style.addressModeV = SpineTexture.toPixiTextureWrap(vWrap);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        // I am not entirely sure about this...\r\n        this.texture.destroy();\r\n    }\r\n\r\n    private static toPixiMipMap(filter: TextureFilter): boolean\r\n    {\r\n        switch (filter)\r\n        {\r\n            case TextureFilter.Nearest:\r\n            case TextureFilter.Linear:\r\n                return false;\r\n\r\n            case TextureFilter.MipMapNearestLinear:\r\n            case TextureFilter.MipMapNearestNearest:\r\n            case TextureFilter.MipMapLinearLinear: // TextureFilter.MipMapLinearLinear == TextureFilter.MipMap\r\n            case TextureFilter.MipMapLinearNearest:\r\n                return true;\r\n\r\n            default:\r\n                throw new Error(`Unknown texture filter: ${String(filter)}`);\r\n        }\r\n    }\r\n\r\n    private static toPixiTextureFilter(filter: TextureFilter): SCALE_MODE\r\n    {\r\n        switch (filter)\r\n        {\r\n            case TextureFilter.Nearest:\r\n            case TextureFilter.MipMapNearestLinear:\r\n            case TextureFilter.MipMapNearestNearest:\r\n                return 'nearest';\r\n\r\n            case TextureFilter.Linear:\r\n            case TextureFilter.MipMapLinearLinear: // TextureFilter.MipMapLinearLinear == TextureFilter.MipMap\r\n            case TextureFilter.MipMapLinearNearest:\r\n                return 'linear';\r\n\r\n            default:\r\n                throw new Error(`Unknown texture filter: ${String(filter)}`);\r\n        }\r\n    }\r\n\r\n    private static toPixiTextureWrap(wrap: TextureWrap): WRAP_MODE\r\n    {\r\n        switch (wrap)\r\n        {\r\n            case TextureWrap.ClampToEdge:\r\n                return 'clamp-to-edge';\r\n\r\n            case TextureWrap.MirroredRepeat:\r\n                return 'mirror-repeat';\r\n\r\n            case TextureWrap.Repeat:\r\n                return 'repeat';\r\n\r\n            default:\r\n                throw new Error(`Unknown texture wrap: ${String(wrap)}`);\r\n        }\r\n    }\r\n\r\n    public static toPixiBlending(blend: BlendMode): BLEND_MODES\r\n    {\r\n        switch (blend)\r\n        {\r\n            case BlendMode.Normal:\r\n                return 'normal';\r\n\r\n            case BlendMode.Additive:\r\n                return 'add';\r\n\r\n            case BlendMode.Multiply:\r\n                return 'multiply';\r\n\r\n            case BlendMode.Screen:\r\n                return 'screen';\r\n\r\n            default:\r\n                throw new Error(`Unknown blendMode: ${String(blend)}`);\r\n        }\r\n    }\r\n}\r\n"],"names":["Texture","PixiTexture","TextureFilter","TextureWrap","BlendMode"],"mappings":"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"}